---
import type { GetStaticPaths } from "astro";
import { getCollection, getEntries } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Pagination from "../../components/Pagination.astro";
import BlogPostCard from "../../components/BlogPostCard.astro";

interface Props {
  page: number;
  posts: object[];
  lastPage: number;
}

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await getCollection("blog");
  posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

  const pages: string[][] = [];
  for (let i = 0; i < posts.length; i += 1) {
    const page = Math.floor(i / 10);
    if (!pages[page]) pages[page] = [];

    pages[page].push(posts[i].slug);
  }

  return pages.map((posts, i) => ({
    params: { page: (i + 1).toString() },
    props: {
      page: i + 1,
      posts,
      lastPage: pages.length,
    },
  }));
};

const { page, posts: postSlugs, lastPage } = Astro.props;

// i'm a devious rat - typecast to 'any' because i know what i'm doing
const posts = await getEntries<"blog">(postSlugs.map((slug) => ({ collection: "blog", slug })) as any);
---

<Layout title={page === 1 ? "Blog" : `Page ${page} - Blog`}>
  <main class="mx-12">
    <h1 class="text-4xl mt-8 mb-4">ACM@UC Blog</h1>
    <Pagination
      baseURL="/blog"
      page={page}
      maxPage={lastPage}
      classList="mb-4 ml-4"
    />
    <section>
      {posts.map((post) => <BlogPostCard post={post} />)}
    </section>
    <Pagination
      baseURL="/blog"
      page={page}
      maxPage={lastPage}
      classList="mb-4 ml-4"
    />
  </main>
</Layout>
