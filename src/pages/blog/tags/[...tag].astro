---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import Pagination from "../../../components/Pagination.astro";
import BlogPostCard from "../../../components/BlogPostCard.astro";
import { getEntries } from "astro:content";
import { LeftOutlined } from "@ant-design/icons";

interface Props {
  tag: string;
  postSlugs: string[];
  page: number;
  lastPage: number;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

  // gather all tags used in posts
  const tags: Record<string, string[]> = {};
  for (let i = 0; i < posts.length; i++) {
    const post = posts[i];
    if (!post.data.tags) continue;
    for (let j = 0; j < post.data.tags.length; j++) {
      if (!tags[post.data.tags[j]]) {
        tags[post.data.tags[j]] = [post.slug];
      } else {
        tags[post.data.tags[j]].push(post.slug);
      }
    }
  }

  // paginate each tag
  // generate a set of paths for each tag (default page and paginated pages)
  // iterate over every tag contained within posts, and paginate the posts
  const paths: { params: { tag: string }; props: Props }[] = [];
  const tagList = Object.keys(tags);
  for (let i = 0; i < tagList.length; i++) {
    const tag = tagList[i];
    const tagPosts = tags[tag];
    const pages: string[][] = [];
    for (let j = 0; j < tagPosts.length; j += 10) {
      pages.push(tagPosts.slice(j, j + 10));
    }

    // default page (just page 1 duplicated)
    paths.push({
      params: { tag },
      props: {
        tag,
        postSlugs: pages[0],
        page: 1,
        lastPage: pages.length,
      },
    });
    // the rest of the god-fearing pages
    for (let j = 0; j < pages.length; j++) {
      paths.push({
        params: { tag: `${tag}/${j + 1}` },
        props: {
          tag,
          postSlugs: pages[j],
          page: j + 1,
          lastPage: pages.length,
        },
      });
    }
  }

  return paths;
}

const { tag, postSlugs, page, lastPage } = Astro.props;

// another any typecast because i am a devious rat
const posts = await getEntries<"blog">(postSlugs.map((slug) => ({ collection: "blog", slug })) as any);
---

<Layout title={`'${tag}' posts - Blog`}>
  <main class="mx-12">
    <a
      class="flex items-center uppercase transition-colors !text-red hover:!text-white mt-8 ml-2"
      href="/blog"
    >
      <LeftOutlined className="mr-1" />
      All posts
    </a>
    <h1 class="text-4xl mt-2 mb-4">Posts tagged "{tag}"</h1>
    <Pagination
      baseURL={`/blog/tags/${tag}`}
      page={page}
      maxPage={lastPage}
      classList="mb-4 ml-4"
    />
    {posts.map((post) => <BlogPostCard post={post} />)}
    <Pagination
      baseURL={`/blog/tags/${tag}`}
      page={page}
      maxPage={lastPage}
      classList="mb-4 ml-4"
    />
  </main>
</Layout>
